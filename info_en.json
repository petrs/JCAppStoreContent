[
   {
      "type":"category",
      "title":"Utilities",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"JCAlgTest",
      "title":"JCAlgTest",
      "applet_instance_names":null,
      "icon":"jcalgtest.png",
      "latest":"1.7.9",
      "versions":[
         "1.3",
         "1.6",
         "1.6.1",
         "1.7",
         "1.7.1",
         "1.7.2",
         "1.7.3",
         "1.7.4",
         "1.7.5",
         "1.7.6",
         "1.7.7",
         "1.7.8",
         "1.7.9"
      ],
      "builds":{
         "1.3":[
            "2.1.2",
            "2.2.1",
            "2.2.2",
            "3.0.4"
         ],
         "1.6":[
            "2.2.2"
         ],
         "1.6.1":[
            "2.2.1",
            "2.2.2"
         ],
         "1.7":[
            "2.2.2"
         ],
         "1.7.1":[
            "2.2.1",
            "2.2.2"
         ],
         "1.7.2":[
            "2.2.2"
         ],
         "1.7.3":[
            "2.2.2"
         ],
         "1.7.4":[
            "2.2.2"
         ],
         "1.7.5":[
            "2.2.2"
         ],
         "1.7.6":[
            "2.2.2"
         ],
         "1.7.7":[
            "2.2.2"
         ],
         "1.7.8":[
            "2.2.2"
         ],
         "1.7.9":[
            "2.2.2"
         ]
      },
      "author":"CRoCS",
      "description":"<p>Automated testing tool for algorithms supported by particular smart card with JavaCard platform.<br><br><i>Contribution with results for YOUR card is wanted! (and highly appreciated :))</i></p>",
      "url":{
         "Repository":"https://github.com/crocs-muni/JCAlgTest",
         "Official webpage":"https://www.fi.muni.cz/~xsvenda/jcalgtest/"
      },
      "keys":false,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"JCMemory",
      "title":"JCMemory",
      "applet_instance_names":null,
      "icon":"jcmem.png",
      "latest":"1.0",
      "versions":[
         "1.0"
      ],
      "builds":{
         "1.0":[
            "2.2.2"
         ]
      },
      "author":"CRoCS",
      "description":"<p>Small applet for card memory analysis. Can obtain the amount of free memory space on given cards, which enables us to predict installation failures because of low memory.</p>",
      "url":{
         
      },
      "keys":false,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"category",
      "title":"Digital signing, OpenPGP and mail security",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"YubicoYkneoOpenPGP",
      "title":"YubiKey NEO App: OpenPGP",
      "applet_instance_names":null,
      "icon":"ykneoopenpgp.png",
      "latest":"1.0.2",
      "versions":[
         "1.0.2"
      ],
      "builds":{
         "1.0.2":[
            "2.2.1",
            "2.2.2"
         ]
      },
      "author":"Yubico",
      "description":"<p>This project implement the OpenPGP card functionality used on the YubiKey NEO device that is sold by Yubico.<br><br>This project is based on the Java Card OpenPGP Card project made by Joeri de Ruiter. The initial modifications we have made compared to the upstream project are minor, but we reserve the right to make other changes and improvements that are specific to the YubiKey NEO hardware.<br><br><b>License:</b> The upstream project was released under the GPLv2+ and our fork uses the same license. All of our changes are released under the same license. More on the website.</p><p><b>You can have only one applet from OpenPGP Card Applets category installed on your card.</b></p>",
      "url":{
         "Repository":"https://github.com/Yubico/ykneo-openpgp",
         "Guides":"https://developers.yubico.com/ykneo-openpgp/",
         "GnuPG host":"https://gnupg.org/download/index.html"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"AnssiSmartPGP",
      "title":"Smart PGP",
      "applet_instance_names":null,
      "icon":"anssifr.png",
      "latest":"1.13",
      "versions":[
         "1.13"
      ],
      "builds":{
         "1.13":[
            "3.0.4"
         ]
      },
      "author":"ANSSI",
      "description":"<p>SmartPGP is a free and open source implementation of the OpenPGP card 3.4 specification in JavaCard. <h3>Features</h3>The following features are implemented at the applet level, but some of them depend on underlying hardware support and available (non-)volatile memory resources:</p><ul><li>RSA (>= 2048 bits modulus, 17 bits exponent) and ECC (NIST P-256, NIST P-384, NIST P-521, brainpool p256r1, brainpool p384r1 and brainpool p512r1) for signature, encryption and authentication;</li><li>On-board key generation and external private key import;</li><li>PIN codes (user, admin and resetting code) up to 127 characters;</li><li>Certificate up to 1 kB (DER encoded) for each key;</li><li>Login, URL, and private DOs up to 256 bytes;</li><li>Command and response chaining;</li><li>AES 128/256 bits deciphering primitive;</li><li>Secure messaging (see below).</li></ul><p><b>You can have only one applet from OpenPGP Card Applets category installed on your card.</b></p>",
      "url":{
         "Repository":"https://github.com/ANSSI-FR/SmartPGP",
         "GnuPG host":"https://gnupg.org/download/index.html",
         "OpenKeychain host":"https://play.google.com/store/apps/details?id=org.sufficientlysecure.keychain",
         "GPG key generation":"https://blog.thapaliya.com/posts/gpg-ssh-smartcard-yubikey-keybase/#smartcard"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"JavaCardOSFluffyPGP",
      "title":"Fluffy PGP Applet",
      "applet_instance_names":null,
      "icon":"javacardos.jpg",
      "latest":"1.0",
      "versions":[
         "1.0"
      ],
      "builds":{
         "1.0":[
            "2.2.2"
         ]
      },
      "author":"JavaCardOS",
      "description":"<p>The FluffyPGP Applet implements the OpenGPG Card v 2.0.1 specification without using secure channels or Global Platform for portability.</p>",
      "url":{
         "Repository":"https://github.com/JavaCardOS/FluffyPGP-Applet",
         "Guides":"https://developers.yubico.com/ykneo-openpgp/",
         "GnuPG host":"https://gnupg.org/download/index.html",
         "GPG key generation":"https://blog.thapaliya.com/posts/gpg-ssh-smartcard-yubikey-keybase/#smartcard"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"PChovanecJCOpenPGP",
      "title":"JC Open PGP",
      "applet_instance_names":null,
      "icon":"",
      "latest":"1.0",
      "versions":[
         "1.0"
      ],
      "builds":{
         "1.0":[
            "2.2.2"
         ]
      },
      "author":"Petr Chovanec",
      "description":"<p>Aim of this project is to create JavaCard applet implementing Functional  Specification of the OpenPGP application on ISO Smart Card Operating Systems.<br><br>Applet supports: <br>  3x 2048-bit RSA CRT keypair<br> Key import (using Key Import Utility)<br> Key generation on card<br> Most of Data Objects from OpenPGP Card v2.<br><br> Because GnuPG doesn't support RSA CRT key import you need to use Key Import Utility (download from official repository). To enable key import follow these steps (WinXP only):<br> 1. Copy WinSCard.dll from your Windows\\System32 directory to GnuPG installation<br> 2. Rename WinSCard.dll to original.dll<br> 3. Copy winscard.dll from folder Key Import Utility to GnuPG installation.</p>",
      "url":{
         "Repository":"https://sourceforge.net/projects/jcopenpgp/",
         "Guides":"https://developers.yubico.com/ykneo-openpgp/",
         "GnuPG host":"https://gnupg.org/download/index.html",
         "GPG key generation":"https://blog.thapaliya.com/posts/gpg-ssh-smartcard-yubikey-keybase/#smartcard"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"category",
      "title":"Authentication and access control",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"VletouxGidsApplet",
      "title":"GIDS Applet",
      "applet_instance_names":null,
      "icon":"gidsapplet.png",
      "latest":"1.3",
      "versions":[
         "1.3"
      ],
      "builds":{
         "1.3":[
            "2.2.1"
         ]
      },
      "author":"Vletoux",
      "description":"<p>Generic Identity Device Specification (GIDS) smart card is the only PKI smart card whose driver is integrated on each Windows since Windows 7. No Windows driver installation is required and this card can be used instantly.</p><p>My Smart Logon (link below) is providing free of charge a \r\n     applet to transform a java card into a GIDS smart card and its integration in OpenSC for other operating systems (Linux, MacOSX). The applet works flawlessly on windows, you need to install many tools and drivers on other OS though.</p>",
      "url":{
         "Repository":"https://github.com/vletoux/GidsApplet",
         "Card Initalization":"http://download.mysmartlogon.com/gids/InitializeGids.exe",
         "OpenSC tool":"https://github.com/OpenSC/OpenSC/releases",
         "Certificate (OpenSC) GUI tool": "https://sourceforge.net/projects/xca/",
         "Win-only step-by-steps":"https://confluence.certgate.com/label/DEMTHSP/gids",
         "Troubleshooting": "http://download.mysmartlogon.com/SmartPolicyv2/Troubleshooting%20smart%20card%20logon%20authentication.pdf",
         "Integration for un*x systems":"https://www.mysmartlogon.com/generic-identity-device-specification-gids-smart-card/"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"YubicoYubiKeyOath",
      "title":"YubiKey Oath",
      "applet_instance_names":null,
      "icon":"ykneoopenpgp.png",
      "latest":"1.0.2",
      "versions":[
         "1.0.2"
      ],
      "builds":{
         "1.0.2":[
            "2.2.2"
         ]
      },
      "author":"Yubico",
      "description":"<p>This project implement the HOTP/TOTP card functionality used on the YubiKey NEO device that is sold by Yubico. Its primary use is to use the YubiKey NEO to generate OATH HOTP/TOTP one-time-passwords.</p>",
      "url":{
         "Repository":"https://github.com/Yubico/ykneo-oath",
         "Android host":"https://play.google.com/store/apps/details?id=com.yubico.yubioath",
         "Technology explanation":"https://developers.yubico.com/OATH/",
         "Websites that support 2FA":"https://twofactorauth.org/"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"philipWendlandIsoApplet",
      "title":"ISO Applet",
      "applet_instance_names":null,
      "icon":"",
      "latest":"0.6.1",
      "versions":[
         "0.6.1"
      ],
      "builds":{
         "0.6.1":[
            "2.2.2"
         ]
      },
      "author":"Philip Wendland",
      "description":"<p>The Java Card IsoApplet (e.g. for use with OpenSC). The Applet is capable of saving a PKCS#15 file structure and performing PKI related operations using the private key, such as signing or decrypting. Private keys can be generated directly on the smart card or imported from the host computer. The import of private keys is disabled in the default security configuration. The applet targets modern Smartcards with Java Card 2.2.2 or above.</p>",
      "url":{
         "Repository":"https://github.com/philipWendland/IsoApplet",
         "OpenSC":"https://github.com/OpenSC/OpenSC",
         "OpenSC tools":"http://htmlpreview.github.io/?https://github.com/OpenSC/OpenSC/blob/master/doc/tools/tools.html",
         "Initialization guide":"https://github.com/philipWendland/IsoApplet/wiki/Initialization",
         "OpenSC Personalisation guide":"https://github.com/OpenSC/OpenSC/wiki/Card-personalization",
         "PKCS#15 use example":"https://crocs.fi.muni.cz/public/research/smartcard/smartcard"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"CrocsHotpViaNdef",
      "title":"HOTP via NDEF",
      "applet_instance_names":null,
      "icon":"",
      "latest":"1.0",
      "versions":[
         "1.0"
      ],
      "builds":{
         "1.0":[
            "2.2.2"
         ]
      },
      "author":"Crocs MUNI",
      "description":"<p>JavaCard HMAC-based One Time Password generator which delivers new code via URL tag of NDEF every time the card is put close to NFC-enabled phone. <br><br> As a result, phone will display prompt to visit URL with current OTP code. No installation of phone software is required. The server side needs to parse OTP code properly from URL request.</p>",
      "url":{
         "Repository":"https://github.com/petrs/hotp_via_ndef",
         "Wiki":"https://github.com/petrs/hotp_via_ndef/wiki"
      },
      "keys":false,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"category",
      "title":"Electronic passports and citizen ID",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"martijno-ronnywsJMRTD",
      "title":"JMRTD: Machine readable Travel Document",
      "applet_instance_names":null,
      "icon":"jmrtd.png",
      "latest":"0.0.2b",
      "versions":[
         "0.0.2b"
      ],
      "builds":{
         "0.0.2b":[
            "2.2.1"
         ]
      },
      "author":"martijno, ronnyws",
      "description":"<p>Free implementation of the MRTD (Machine Readable Travel Documents) standards as set by ICAO used in the ePassport. Consists of an API for card terminal software and a Java Card applet. More information on the host wiki.</p>",
      "url":{
         "Host application":"https://sourceforge.net/projects/jmrtd/files/passporthostapi/0.4.7/",
         "Host wiki":"https://sourceforge.net/p/jmrtd/wiki/Home/",
         "Step by step":"https://www.javacardos.com/tools/passport",
         "Repository":"https://sourceforge.net/projects/jmrtd/"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"martijno-ronnyws-walterschellJMRTDnoEAC",
      "title":"JMRTD-no-EAC: Machine readable Travel Document without EAC",
      "applet_instance_names":null,
      "icon":"jmrtd.png",
      "latest":"0.0.2b",
      "versions":[
         "0.0.2b"
      ],
      "builds":{
         "0.0.2b":[
            "2.2.1"
         ]
      },
      "author":"martijno, ronnyws",
      "description":"<p>Free implementation of the MRTD (Machine Readable Travel Documents) standards without Extended Access Control (EAC) as set by ICAO used in the ePassport. Consists of an API for card terminal software and a Java Card applet. More information on the host wiki.</p>",
      "url":{
         "Host application":"https://sourceforge.net/projects/jmrtd/files/passporthostapi/0.4.7/",
         "Host wiki":"https://sourceforge.net/p/jmrtd/wiki/Home/",
         "Repository":"https://github.com/walterschell/jmrtd-noeac"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"category",
      "title":"Payment applets (EMV, bitcoin wallets..)",
      "hidden_by_default": false
   },
   {
      "type":"applet",
      "name":"ToporinSatoChipApplet",
      "title":"Satochip Applet",
      "applet_instance_names":null,
      "icon":"satochip.jpg",
      "latest":"0.9",
      "versions":[
         "0.9"
      ],
      "builds":{
         "0.9":[
            "3.0.4"
         ]
      },
      "author":"Toporin",
      "description":"<p>Open source javacard applet implementing a Bitcoin hardware wallet with full BIP32 support. SatoChip stands for Secure Anonymous Trustless and Open Chip. It is a javacard applet that can be used as a secure hardware wallet running for example on a Yubikey Neo. The SatoChip has full BIP32 supports. <br> Using SatoChip, an initial BIP32 seed is imported in the javacard and private keys are derived as requested by an external application. Private keys are never exported outside of the secure chip. To improve performances, the result of key derivation is cached in secure memory for future requests so that a specific derivation path is only computed once.<br>The Satochip also supports the import of regular (non-BIP32 keys) such as vanity keys. Here again, private keys cannot be exported outside of the secure chip. Up to 16 regular keys can be imported on the chip. In any case, the private keys can be used to sign transactions and Bitcoin messages, if sufficient credentials are provided.<br>Access to private keys (creation, derivation and signature) is enforced through the use of PIN code.<br>The Satochip wallet is currently in Beta, use with caution! In this phase, it is strongly recommended to use the software on the Bitcoin testnet only. This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.</p>",
      "url":{
         "Repository":"https://github.com/Toporin/SatochipApplet",
         "Electrum host app":"https://github.com/Toporin/electrum-satochip/releases"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"status-imStatusKeycard",
      "title":"Keycard",
      "applet_instance_names":[
         "0x",
         "applet",
         "A00000080400010101",
         "NDEF",
         "D2760000850101"
      ],
      "icon":"status.png",
      "latest":"3.0.1",
      "versions":[
         "3.0.1"
      ],
      "builds":{
         "3.0.1":[
            "3.0.4"
         ]
      },
      "author":"Status",
      "description":"<p>Keycard is a an implementation of a BIP-32 HD wallet running on Javacard 3.0.4+ (see implementation notes).<br>It supports among others</p><ul><li>key generation, derivation and signing</li><li>exporting keys defined in the context of EIP-1581 https://eips.ethereum.org/EIPS/eip-1581</li><li>setting up a NFC NDEF tag</li></ul><p>Communication with the Keycard happens through a simple APDU interface, together with a Secure Channel guaranteeing confidentiality, authentication and integrity of all commands. It supports both NFC and ISO7816 physical interfaces, meaning that it is compatible with any Android phone equipped with NFC, and all USB Smartcard readers. <br>The most obvious case for integration of Keycard is crypto wallets (ETH, BTC, etc), however it can be used in other systems where a BIP-32 key tree is used and/or you perform authentication/identification.</p><br><p>This software contains two applets (unlike official release, we decided to remove 'Cash applet' due to low use case'). The first applet is a KeyCard - wallet, the second applet is NDEF tag. More on NDEF can be found in NDEF applets section - the use case is the same.</p>",
      "url":{
         "Repository":"https://github.com/status-im/status-keycard",
         "Status app":"https://play.google.com/store/apps/details?id=im.status.ethereum",
         "Status with Keycard article":"https://our.status.im/status-app-introduces-integration-with-keycard/",
         "KeyCard webpage":"https://keycard.tech/",
         "Host app":"https://github.com/status-im/keycard-cli",
         "WallETH":"https://play.google.com/store/apps/details?id=org.walleth",
         "WallETH webpage":"https://walleth.org/"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": false
   },
   {
      "type":"category",
      "title":"Password management",
      "hidden_by_default": true
   },
   {
      "type":"applet",
      "name":"JavaCardOSKeepasNFC",
      "title":"Keepas NFC",
      "applet_instance_names":null,
      "icon":"javacardos.jpg",
      "latest":"1.0",
      "versions":[
         "1.0"
      ],
      "builds":{
         "1.0":[
            "2.2.1"
         ]
      },
      "author":"JavaCardOS",
      "description":"<p>KeepassNFC is an applet on javacard platform that can protect the secret key of your KeePass database. It is based on the project smartcard_crypto_applet and can be run on javacard platform with JCRE version 2.2.x or above. KeePass is a famous software about password management.</p>",
      "url":{
         "Tutorial":"https://www.javacardos.com/wiki/keepassnfc",
         "Android host":"https://play.google.com/store/apps/details?id=net.lardcave.keepassnfc",
         "Repository":"https://github.com/JavaCardOS/KeepassNFCApplet"
      },
      "keys":true,
      "default_selected":"",
      "pgp":"",
      "signed_by":"",
      "hidden_by_default": true
   }
]